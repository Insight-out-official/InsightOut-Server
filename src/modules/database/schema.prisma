// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ****************************
// ************ 유저 ***********
// ****************************

model User {
  id       Int    @id @default(autoincrement()) @map("user_id")
  email    String @unique @db.VarChar(100)
  socialId String @map("social_id") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime @updatedAt @map("deleted_at")
  nickname  String

  UserInfo UserInfo?
  Resume   Resume[]
  Experiences   Experience[]

  @@map("user")
}

enum Provider {
  google // 구글 로그인
  apple // 애플 로그인
  kakao // 카카오 로그인
}

// TODO 직무 모두 기입 필요
enum Field {
  developer
}

model UserInfo {
  userId   Int      @id @map("user_id")
  field    Field? // 직무 분야
  provider Provider? // 소셜 로그인 제공자
  imageUrl String?   @map("image_url") @db.Text // 이미지 url

  User User @relation(references: [id], fields: [userId])

  @@map("user_info")
}

// ****************************
// ********** 자기소개서 *********
// ****************************

// 자기소개서 폴더링 제목
model Resume {
  id    Int    @id
  title String @db.VarChar(100) // 자기소개서 제목

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int @map("user_id")

  User User @relation(references: [id], fields: [userId])
  Question Question[]

  @@map("resume")
}

// ********************************
// ********** 자기소개서 문항 *********
// ********************************
model Question {
  resumeId Int @id @map("resume_id") // 자기소개서 폴더링 제목 pfk

  title  String @db.VarChar(50) // 문항 제목
  answer String @db.VarChar(3000) // 문항 내용

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Resume Resume @relation(references: [id], fields: [resumeId])

  // @@id([resumeId])
  @@map("question")
}


// ********************************
// ***** 경험 in 경험 분해 ********
// ********************************

// 임시 저장이 있기에 모든 필드는 Nullable입니다.
model Experience {
  id Int @id @default(autoincrement()) @map("id")// 경험 id

  title String? @db.VarChar(100) // 경험 제목

  startDate String? @db.VarChar(50) @map("start_date") // 시작 날짜 type: YYYY-MM
  endDate String? @db.VarChar(50) @map("end_date") // 끝 날짜 type: YYYY-MM

  experienceStatus ExperienceStatus @default(inprogress) // 경험 분해 진행 척도 디폴트 inprogress

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int @map("user_id")

  User User @relation(references: [id], fields: [userId])
  ExperienceInfo ExperienceInfo?

  @@map("experience")
}

// 경험 분해 진행 상태
enum ExperienceStatus {
  inprogress  // 진행중
  done    // 끝
}

// ********************************
// ********** 경험 정보 ***********
// ********************************
// 임시 저장이 있기에 모든 필드는 Nullable입니다.
model ExperienceInfo {
  experienceInfoId Int @default(autoincrement())  @map("experience_info_id")
  
  experienceRole String? @db.VarChar(100) @map("experience_role") // 경험 나의 역할
  motivate String? @db.VarChar(100) // 경험 수행 이유

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  experienceId Int @id @map("experience_id")// 경험 id
  experience Experience @relation(references: [id], fields: [experienceId])

  @@map("experience_info")
}